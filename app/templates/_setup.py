#!/usr/bin/env python
from __future__ import absolute_import, print_function
from itertools import chain, imap, repeat
from setuptools import setup, find_packages
from os import walk
from os.path import join

# generated by pymod-generator
#
# DO NOT CHANGE THIS METHOD!!
# to include directories in the module see :package_data: below
#
def include_directories(in_dirs):
    paths = list()
    for directory in in_dirs:
        paths.extend(list(chain.from_iterable(imap(join, repeat(root[len('<%= moduleName %>') + 1:]), files) for root, _, files in walk(join('<%= moduleName %>', directory)))))
    return paths

# add list of directories to be included
#
#     package_data = include_directories(['dir_to_include', 'other_dir_to_include'])
#
package_data = include_directories([])


# add pypi dependencies here
#
#     required_packages = [
#             'boto',
#             'gunicorn',
#             'gevent',
#             'Flask',
#             'Flask-RESTful'
#         ]
#
required_packages = [<%= deps.length ? _.map(deps, function(d){ return "\n\t'"+ d+ "'"; }).join(',')+"\n\t" : "" %>]


# list of scripts that should be linked
#
#    'my-cmd=<%= moduleName %>.cli:my_cmd_method'
#
scripts = [
    'hello-<%= moduleName %>=<%= moduleName %>.cli:hello'
]


setup(name='<%= moduleName %>',
      version='0.1',
      description="<%= description %>",
      packages=find_packages(),
      package_data={
        '<%= moduleName %>': package_data
      },
      install_requires=required_packages,
      entry_points=dict(console_scripts=scripts))
